/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

void fun(Node* node, Node* temp, unordered_map<int, Node*>& visited) {
    visited[node->val] = temp;  // Mark node as visited
    vector<Node*> arr = node->neighbors;
    int t = arr.size();
    for (int i = 0; i < t; i++) {
        if (visited.find(arr[i]->val) != visited.end()) {
            temp->neighbors.push_back(visited[arr[i]->val]);
        } else {
            Node* n = new Node(arr[i]->val);
            temp->neighbors.push_back(n);
            fun(arr[i], n, visited);
        }
    }
}

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (node == nullptr) {
            return nullptr;
        }
        Node* clone = new Node(node->val);
        unordered_map<int, Node*> visited;
        visited[node->val] = clone;
        fun(node, clone, visited);
        return clone;
    }
};
